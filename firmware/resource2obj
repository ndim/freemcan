#!/bin/sh
#
# resource2obj - convert resource file to .h and .S file for compilation to .o
# Copyright (C) 2016 Hans Ulrich Niedermann <hun@n-dimensional.de>

print_version_and_license() {
    ${SED-sed} -n 's/^# //p; /^$/q' "$0"
    echo
    cat<<EOF
The MIT License (MIT)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
EOF
}

print_help()
{
    cat<<EOF
Usage: resource2obj.sh [options...] <asm-file> <symbol> <resource-file>

Convert <resource-file> to <asm-file> and a header file as symbol <symbol>.
Use you assembler and C compiler

Options:

  --help        Print this help message
  --version     Print copyright and version information.

  --align none  (default)
  --align 1
  --align 2
  --align 4
  --align 8
                Align the resource data to multiples of N bytes,
                or do not align it at all.

  --header <filename.h>
                Write the header file to <filename.h> instead of
                the default filename derived from the name of <asm-file>.

  --check
                Generate, compile and run a few checks using the generated
                asm and header files.
  --keep-checks
                Keep the files from the checks around.

  --quiet
                Quiet output

  --verbose
                Verbose output
EOF
}


########################################################################
#
# This program has been tested using
#
#    a) bash
#    b) busybox sh
#    c) dash
#
#    a) SED="" (i.e. GNU coreutils sed)
#    b) SED="busybox sed"
#
#    a) WC="" (i.e. GNU coreutils wc)
#    b) WC="busybox wc"
#
#    a) EXPR="" (i.e. GNU coreutils expr)
#    b) EXPR="busybox expr"
#
# So at least the shell parts should be reasonably compatible.
#
########################################################################


set -e
set -u


########################################################################
# Output messages
########################################################################

prog="$(basename "$0")"

__verbose=false
verbose() {
    if ${__verbose}; then
	echo "${prog}:" "verbose:" "$@"
    fi
}

__quiet=false
non_quiet() {
    if ${__quiet}; then :; else
	echo "${prog}:" "$@"
    fi
}

error() {
    echo "${prog}:" "error:" "$@"
}


########################################################################
# Command line parsing
########################################################################

cmdline_args="$*"

align="none"
symbol=""
resource_file=""
asm_file=""
header_file=""

skip_checks=:
clean_checks=:

while [ "$#" -gt "0" ]
do
    case "$1" in
	--help)
	    print_help
	    exit 0
	    ;;
	--version)
	    print_version_and_license
	    exit 0
	    ;;
	--quiet)
	    __quiet=:
	    ;;
	--verbose)
	    __verbose=:
	    ;;
	--check)
	    skip_checks=false
	    ;;
	--keep-checks)
	    clean_checks=false
	    ;;
	--align)
	    case "$2" in
		none) align="$2" ;;
		1)    align="$2" ;;
		2)    align="$2" ;;
		4)    align="$2" ;;
		8)    align="$2" ;;
		16)   align="$2" ;;
		*)
		    error "invalid command line argument value to --align: \"$2\""
		    exit 3
		    ;;
	    esac
	    shift
	    ;;
	--header)
	    header_file="$2"
	    shift
	    ;;
	--*)
	    error "invalid command line parameter \"$1\""
	    exit 3
	    ;;
	*)
	    if [ "x" = "x$asm_file" ]; then
		asm_file="$1"
		shift
		continue
	    fi
	    if [ "x" = "x$symbol" ]; then
		symbol="$1"
		shift
		continue
	    fi
	    if [ "x" = "x$resource_file" ]; then
		resource_file="$1"
		shift
		continue
	    fi
	    error "invalid command line parameter \"$2\""
	    exit 3
	    ;;
    esac
    shift
done

if ${__quiet} && ${__verbose}; then
    error "Both --quiet and --verbose given. Please decide."
    exit 1
fi

if [ "x" = "x$symbol" ]; then
    error "<symbol> missing on the command line"
    exit 1
fi

if [ "x" = "x$resource_file" ]; then
    error "<resource-files> missing on the command line"
    exit 1
fi

if [ "x" = "x$asm_file" ]; then
    error "<asm-file> missing on the command line"
    exit 1
fi

verbose "symbol=$symbol"
verbose "resource_file=$resource_file"
verbose "asm_file=$asm_file"
verbose "align=$align"

if [ "x" = "x$header_file" ]; then
    header_file="$(dirname "$asm_file")/$(basename "$asm_file" .S).h"
fi
header_file="$(echo "$header_file" | ${SED-sed} 's/^\.\///')"
verbose "header_file=$header_file"

asm_base="$(basename "$asm_file")"
verbose "asm_base=$asm_base"

header_base="$(basename "$header_file")"
verbose "header_base=$header_base"

header_macro="BIN_$(echo "$resource_file" | tr a-z./- A-Z___)_RESOURCE_H"
verbose "header_macro=$header_macro"

resource_size="$(${WC-wc} -c "${resource_file}" | ${SED-sed} -n 's/^\([0-9]\{1,\}\)[^0-9].*/\1/p')"
verbose "resource_size=${resource_size}"


########################################################################
# Generate the output files
########################################################################

case "$align" in
    none)
	align_statement="/* no aligment */"
	;;
    *)
	align_statement=".balign ${align}"
	;;
esac

non_quiet "generate ${asm_base}"
cat>"$asm_file"<<EOF
/* This file has been autogenerated by running
 *
 *     resource2obj ${cmdline_args}
 *
 * alongside the C/C++ header file
 *
 *     $header_base
 *
 * which contains some usage examples as C/C++ code.
 */

	.section .rodata

	/* the object containing the actual data */
	.global	${symbol}
	.type	${symbol}, @object
	${align_statement}
${symbol}:
	.incbin	"${resource_file}"
	.size	${symbol}, . - ${symbol}

	/* pseudo object located just after the ${symbol} object */
${symbol}_end = .
	.global	${symbol}_end
	.type	${symbol}_end, @object
	.size	${symbol}_end, 0

	/* pseudo object whose address can be used as size constant */
${symbol}_size_as_addr = (${symbol}_end - ${symbol})
	.global	${symbol}_size_as_addr
	.type	${symbol}_size_as_addr, @object
	.size	${symbol}_size_as_addr, 0
EOF


non_quiet "generate ${header_file}"
cat>"$header_file"<<EOF
/* This header file has been autogenerated by running
 *
 *     resource2obj ${cmdline_args}
 *
 * alongside the asm source file
 *
 *     ${asm_base}
 *
 * Usage example 1: send ${symbol} content byte for byte
 *
 *     #include "${header_base}"
 *
 *     void test_function(void)
 *     {
 *       for (const char *p=${symbol};
 *            p < ${symbol}_end;
 *            ++p) {
 *         send_byte(*p);
 *       }
 *     }
 *
 * Usage example 2: initialize memory area with ${symbol} content
 *
 *     #include <stdlib.h>
 *     #include <string.h>
 *     #include <stdio.h>
 *
 *     #include "${header_base}"
 *
 *     char *storage_area;
 *
 *     void test_function(void)
 *     {
 *       storage_area = malloc(sizeof(${symbol}));
 *       if (!storage_area) {
 *         perror("malloc for sizeof(${symbol})");
 *         exit(EXIT_FAILURE);
 *       }
 *       memcpy(storage_area, ${symbol}, sizeof(${symbol}));
 *     }
 *
 * Usage example 3: send ${symbol} content byte for byte
 *
 *     #include "${header_base}"
 *
 *     void test_function(void)
 *     {
 *       for (size_t i=0; i < sizeof(${symbol}); ++i) {
 *         send_byte(${symbol}[i]);
 *       }
 *     }
 *
 * Usage example 4: send ${symbol} content dword by dword
 *
 *     #include <assert.h>
 *     #include <stdlib.h>
 *     #include <stdio.h>
 *     #include "${header_base}"
 *
 *     void send_by_dword(const uint32_t *const p, const size_t count)
 *     {
 *       for (size_t i=0; i < count; ++i) {
 *         send_dword(p[i]);
 *       }
 *     }
 *
 *     static_assert((sizeof(${symbol}) & 3) == 0,
 *                   "sizeof(${symbol}) must be a multiple of 4");
 *
 *     void test_function(void)
 *     {
 *       const size_t    dword_sz = sizeof(${symbol}) / 4;
 *       const uint32_t *dword    = (void *)(${symbol});
 *       send_by_dword(dword, dword_sz);
 *     }
 *
 */
#ifndef ${header_macro}
#define ${header_macro}

#ifdef __cplusplus
extern "C" {
#endif

/* Required for size_t */
#include <stdlib.h>

/* The symbol where the resource memory area begins */
extern char ${symbol}[${resource_size}];

/* The symbol where the resource memory area ends */
extern char ${symbol}_end[];

#ifdef __cplusplus
}
#endif

#endif /* ${header_macro} */
EOF


verbose "Done."


########################################################################
# Run tests
########################################################################

if "$skip_checks"; then
    exit 0
fi

test_makefile="${prog}-GNUmakefile"
test_main="${prog}-test-main"
test_header="${prog}-test.h"

cat>"${test_main}.c"<<EOF
#include <stdint.h>
#include <stdio.h>

#include "${test_header}"

void send_byte(const uint8_t byte)
{
  static size_t ofs = 0;
  if ((32 <= byte) && (byte <= 127)) {
    printf("send_byte %8zu=0x%05zx: '%c' 0x%02x=%d\n", ofs, ofs, byte, byte, byte);
  } else {
    printf("send_byte %8zu=0x%05zx:     0x%02x=%d\n", ofs, ofs, byte, byte);
  }
  ++ofs;
}

void send_dword(const uint32_t val)
{
  static size_t ofs = 0;
  printf("send_dword %7zu: 0x%08x %d\n", ofs, val, val);
  ofs += 4;
}

int main(void)
{
  test_function();
  return 0;
}
EOF

cat>"${test_header}"<<EOF
#ifndef ${prog}_TEST_H
#define ${prog}_TEST_H

#include <stdint.h>

void send_byte(const uint8_t byte);
void send_dword(const uint32_t byte);

void test_function(void);

#endif /* ${prog}_TEST_H */
EOF

asm_obj="$(basename "${asm_file}" .S).o"
asm_lst="$(basename "${asm_file}" .S).lst"

cat>"${test_makefile}"<<EOF
.PHONY: all
all: all-local

CLEANFILES =
TESTS =

CLEANFILES += ${test_main}.lst
CLEANFILES += ${test_main}.o
CLEANFILES += ${test_main}.c
CLEANFILES += ${test_header}
CLEANFILES += ${asm_obj}
CLEANFILES += ${asm_lst}

${asm_file} ${header_file}: ${prog} ${resource_file}
	\$(SHELL) ${prog} ${asm_file} ${symbol} ${resource_file}

EOF

examples="1 2 3"
if [ "$(${EXPR-expr} ${resource_size} % 4)" = "0" ]; then
    examples="$examples 4"
else
    non_quiet "Skipping example code 4 as resource file size is not a multiple of 4"
fi

for n in ${examples}
do
    test_name="${prog}-test-${n}"
    echo "#include \"${test_header}\"" > "${test_name}.c"
    ${SED-sed} -n '/\*\//q; s/^ \*//p' "$header_file" | ${SED-sed} "1,/Usage example ${n}/d; /Usage/,\$d" | ${SED-sed} 's/^     //' >> "${test_name}.c"
    echo "TESTS += ${test_name}" >> "${test_makefile}"
    echo "CLEANFILES += ${test_name}" >> "${test_makefile}"
    echo "CLEANFILES += ${test_name}.lst" >> "${test_makefile}"
    echo "CLEANFILES += ${test_name}.o" >> "${test_makefile}"
    echo "CLEANFILES += ${test_name}.c" >> "${test_makefile}"
    echo "${test_name}: ${test_main}.o ${test_name}.o ${asm_obj}" >> "${test_makefile}"
    echo "	${GCC-gcc} -Wall -Wextra -Werror -o \$@ $^" >> "${test_makefile}"
    echo >> "${test_makefile}"
    echo "####### ${test_name}.c #######"
    nl -ba "${test_name}.c"
done

cat>>"${test_makefile}"<<EOF
%.o: %.c
	${GCC-gcc} -std=c11 -Wall -Wextra -Werror -Wa,-adhlns="\$(@:.o=.lst)" -o "\$@" -c "\$<"

%.o: %.S
	${GCC-gcc} -Wall -Wextra -Werror -Wa,-adhlns="\$(@:.o=.lst),-gstabs" -o "\$@" -c "\$<"

.PHONY: all-local
all-local: \$(TESTS)

.PHONY: clean
check: \$(TESTS)
	set -ex; for test in \$(TESTS); do ./\$\${test}; done

.PHONY: clean
clean:
	rm -f \$(CLEANFILES)
EOF

${MAKE-make} -f "${test_makefile}"
${MAKE-make} -f "${test_makefile}" check

if "$clean_checks"; then
    ${MAKE-make} -f "${test_makefile}" clean
    rm -f "${test_makefile}"
fi

exit 0
