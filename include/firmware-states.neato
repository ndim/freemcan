digraph firmware_fsm {
  node [shape=ellipse, fontname=Helvetica, fontsize=10];
  edge [fontname=Helvetica, fontsize=10];

  null      [pos="5.5,4!" shape=plaintext label=""];
  booting   [pos="4,4!"];
  ready     [pos="2,4!" label="READY"];
  reset     [pos="2,2.5!" label="RESET"];
  timer0    [pos="0,4!"];
  timer1    [pos="1,3!"];
  token0    [pos="0,3!"];
  token1    [pos="1,2!"];
  token2    [pos="0,2!"];
  token3    [pos="0,1!"];
  checksum  [pos="0,0!"];
  measuring [pos="4,0!" label="MEASURING"];
  done      [pos="4,2.5!" label="DONE"];

  null -> booting [ style=bold label="power on"];
  reset -> booting [ label="\nhardware reset done\n-/-" style=bold ];

  booting -> ready [ label="hw boot done\nstate 'READY'" style=bold ];

  ready -> timer0 [ label="cmd 'm'\n-/-" style=bold ];
  timer0 -> timer1   [ label="timer byte 0\n-/-" style=bold ];
  timer1 -> token0   [ label="timer byte 1\n-/-" style=bold ];
  token0 -> token1   [ label="token byte 0\n-/-" style=bold ];
  token1 -> token2   [ label="token byte 1\n-/-" style=bold ];
  token2 -> token3   [ label="token byte 2\n-/-" style=bold ];
  token3 -> checksum [ label="token byte 3\n-/-" style=bold ];
  checksum -> measuring [ label="chksum byte, if match\nstart measurement, start timer, state 'MEASURING'" style=bold ];
  checksum -> reset [ color=red fontcolor=red label="chksum byte, if fail\ntext 'checksum fail', state 'RESET'" ];

  measuring -> reset [ color=blue fontcolor=blue label="cmd 'a'\nvalue table 'aborted', state 'RESET'"];
  measuring -> measuring [ color=blue fontcolor=blue label="cmd 'i'\nvalue table 'intermediate', state 'MEASURING'" ];

  ready -> reset [ color=blue fontcolor=blue label="cmd 'r'\nstate 'RESET'"];
  measuring -> done [ label="timer done\nvalue table 'done', state 'DONE'" style=bold ];
  done -> reset [ label="cmd 'r'\nstate 'RESET'" style=bold ];
  done -> done  [ color=blue fontcolor=blue label="any other byte\nvalue table 'resend', state 'DONE'" ];

  ready:ne -> ready:ne [ color=darkgreen fontcolor=darkgreen label="cmd 's'\nstate 'READY'"];
  done:ne -> done:ne [ color=darkgreen fontcolor=darkgreen label="cmd 's'\nstate 'DONE'"];
  measuring:ne -> measuring:ne [ color=darkgreen fontcolor=darkgreen label="cmd 's'\nstate 'MEASURING'"];
}
